


############## =================== Generate Network ================= ################

# modelType can be baseNet, sectorNet
networkType = 'baseNet'

networkName = 'MyBaseNet'

outputFolder = '/home/mountain/Desktop/BrainNets/output/baseNetOutput'

# Dir that stores the pre training weights
preTrainedWeights = ''


# Cost function values
# 0:
# 1:
costFunction = 0 
SoftMaxTemperature = 1.0
#### ========= Learning rate ========== #####

learningRate = 0.0001
learningRateDecay = 0.995
weightDecay = 0.0001

optimizer = 'rmsprop'
batchSize = 10


#-------------------------------- Architecture --------------------------------------#



#[CNN_Architecture]
kernelNumList = [30, 30, 40, 40, 40, 50, 50, 5]

# Kernels shapes:  (Note, if kernel size is equal to 1 on one layer means that this layer is fully connected)
# In this example there will be 3 conv layers and 1 fully connected layer (+ classification layer)
kernelShapeList = [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [1, 1, 1]]

# Intermediate layers to connect to the last conv layer (just before the first fully connected layer)
intermediateConnectedLayers = []


# Array size should be equal to number of fully connected (FC) layers + classification layer
dropoutRates = 0.2

# Non-linear activations
# Type: 0: Linear
#       1: ReLU
#       2: PReLU
#       3: LeakyReLU
activationType = 2

# TODO. Include activation type for Softmax layer
# Number of classes: background + classes to segment
numOfClasses = 5














# ############################## Generate Network ######################################

networkType = 'baseNet'
preTrainedWeights = ''

# #####################################################################################



# ################################ Train Network ######################################

# =================== Training and validation data information ========================

imageFolder = '/home/mountain/Desktop/BrainNets/data/normTrainingDataWithROI/'
imageGrades = ['HGG']
numOfPatients = 100
modals = ['T1', 'T1c', 'T2', 'Flair']
useROI = True
normType = 0
weightMapType = 0

# ======================================================================================

# ================== Training and validation setting information =======================

trainValRatio = 97
memoryThreshold = 10
usePoolToSample = True
numOfEpochs = 5
numOfSubEpochs = 7
batchSize = 8
trainSampleSize = [25, 25, 25]
valSampleSize = [25, 25, 25]
numOfTrainSamplesPerSubEpoch = 20000
weightsFolder = '/home/mountain/Desktop/BrainNets/weights/baseWeights'

# ======================================================================================

# ######################################################################################


# ################################# Test Network #######################################


testSampleSize  = [31, 31, 31]

testImageFolder = '/home/mountain/Desktop/BrainNets/data/normTestDataWithROI/HGG_LGG'

useROITest = True

useTestData = True

# ######################################################################################
