


############## =================== Generate Network ================= ################

# modelType can be baseNet, sectorNet
networkType = 'baseNet'

networkName = 'MybaseNet'

outputFolder = '/home/mountain/Desktop/BrainNets/output/baseNetOutput'

# Dir that stores the pre training weights
preTrainedWeights = ''


# Cost function values
# 0:
# 1:
costFunction = 0 
SoftMaxTemperature = 1.0
#### ========= Learning rate ========== #####

learningRate = 0.001
learningRateDecay = 0.995
weightDecay = 0.0001

optimizer = 'rmsprop'
batchSize = 10


#-------------------------------- Architecture --------------------------------------#



#[CNN_Architecture]
kernelNumList = [30, 30, 40, 40, 40, 50, 50, 5]

# Kernels shapes:  (Note, if kernel size is equal to 1 on one layer means that this layer is fully connected)
# In this example there will be 3 conv layers and 1 fully connected layer (+ classification layer)
kernelShapeList = [[3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [1, 1, 1]]

# Intermediate layers to connect to the last conv layer (just before the first fully connected layer)
intermediateConnectedLayers = []


# Array size should be equal to number of fully connected (FC) layers + classification layer
dropoutRates = [0.25,0.5] 

# Non-linear activations
# Type: 0: Linear
#       1: ReLU
#       2: PReLU
#       3: LeakyReLU
activationType = 2

# TODO. Include activation type for Softmax layer
# Number of classes: background + classes to segment
numOfClasses = 5

# ------- Weights initialization ----------- #

#load weight layers = [] # Next release
# If using pre-trained models, specify the folder that contains the weights and the indexes of those weights to use
# To ease the transfer between different softwares (i.e matlab for instance), and between different architectures,
# the weights for each layer should be stored as a single file.
# Right now weights have to be in .npy format
weightsFolder = '/home/mountain/Desktop/BrainNets/weights/baseWeights'















############## =================== Train Network ================= ################

# The loaded patient lada should not large than this value. The unit is G
memoryThreshold = 10

#[Training Parameters]
numOfEpochs = 2
numOfSubEpochs = 3
# TODO. Computer the number of samples that can be used according the size of receptive field and sample size.
numOfTrainSamplesPerSubEpoch = 1000
# The number of patients used for model, if numOfPatients = -1
# Use all patients in corresbonding grades
numOfPatients = 7
# trainValRatio/trainValRatio+1 patients used to train
trainValRatio = 5
# Subvolumes (i.e. samples) sizes.
# Validation equal to testing samples
# The trainSampleSize shoule be large than the size of receptive field of the network
trainSampleSize = [25,25,25]
valSampleSize = [45, 45, 45]

usePoolToSample = True

modals = ['T1', 'T1c', 'T2', 'Flair']

# 0 for norm whole image
# 1 for norm brain region
normType = 0

# 0 for same weight for foreground and background
# 1 for same weight for foreground and background, but within the foreground,
# assign weight for different tumor substructure according to its number, 
# by this way we can keep balanca among different tumor substructure.
# 2 keep balance for all 5 class.
weightMapType = 0


#[Training Images]
imageFolder = '/home/mountain/Desktop/BrainNets/data/normTrainingDataWithROI/'
# Only Use HGG files or LGG or both HGG and LGG
imageGrades = ['HGG', 'LGG']
# Values of the ROI should be 0 (non interest) and 1 (region of interest)
useROI = True





############## =================== Test Network ================= ################



testSampleSize  = [45,45,45]

testImageFolder = '/home/mountain/Desktop/BrainNets/data/testImage'

useROITest = True



