

############## =================== Training Options  =================  ################
#[Training Parameters]
numOfEpochs = 3
numOfSubEpochs = 3
# TODO. Computer the number of samples that can be used according the size of receptive field and sample size.
numOfSamplesPerSubEpochTrain = 1000
# The number of patients used for model, if numOfPatients = -1
# Use all patients in corresbonding grades
numOfPatients = 30
# trainValRatio/trainValRatio+1 patients used to train
trainValRatio = 5
# Subvolumes (i.e. samples) sizes.
# Validation equal to testing samples
# The trainSampleSize shoule be large than the size of receptive field of the network
trainSampleSize = [25,25,25]
valSampleSize  = [45,45,45]

modals = ['T1', 'T1c', 'T2', 'FLAIR']

# 0 for norm whole image
# 1 for norm brain region
normType = 0

# 0 for same weight for foreground and background
# 1 for same weight for foreground and background, but within the foreground,
# assign weight for different tumor substructure according to its number, 
# by this way we can keep balanca among different tumor substructure.
# 2 keep balance for all 5 class.
weightMapType = 0


#[Training Images]
imagesFolder = /home/mountain/Desktop/BrainNets/data/normTrainingDataWithROI/
# Only Use HGG files or LGG or both HGG and LGG
imageGrades = ['HGG']
# Values of the ROI should be 0 (non interest) and 1 (region of interest)
useROI = True

# Indexes for training/validation images. Note that indexes should correspond to the position = inex + 1 in the folder,
# since python starts indexing at 0
indexesForTraining = [0,1,2,3,4]
indexesForValidation = [5]


# Cost function values
# 0:
# 1:
costFunction = 0 
SoftMax temperature = 1.0
#### ========= Learning rate ========== #####
L1RegularConstant = 1e-6
L2 RegularConstant = 1e-4

# TO check
# The array size has to be equal to the total number of layers (i.e. CNNs + FCs + Classification layer)
#Leraning Rate = [0.0001, 0.0001, 0.0001, 0.0001,0.0001, 0.0001, 0.0001, 0.0001,0.0001, 0.0001, 0.0001, 0.0001,0.0001, 0.0001 ]
Leraning Rate = [0.001]
# First epoch to change learning rate
First Epoch Change LR = 1
# Each how many epochs change learning rate
Frequency Change LR = 2
# TODO. Add learning rate for each layer

#### ========= Momentum ========== #####
# Type of momentum
# 0: Classic
# 1: Nesterov
Momentum Type = 1
Momentum Value = 0.6
# Use momentum normalized?
momentumNormalized = 1

#### ======== Optimizer ===== ######
# Type: 0-> SGD
#       1-> RMSProp (TODO. Check why RMSProp complains....)
Optimizer Type = 1

#In case we chose RMSProp
Rho RMSProp = 0.9
Epsilon RMSProp = 1e-4

# Apply Batch normalization
# 0: False, 1: True
applyBatchNormalization = 1
BatchNormEpochs = 20

# Apply padding to images
# 0: False, 1: True
applyPadding = 1

